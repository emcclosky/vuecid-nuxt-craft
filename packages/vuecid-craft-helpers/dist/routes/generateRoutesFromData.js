"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _vuecidHelpers = require("@wearelucid/vuecid-helpers");

var _flattenNavigation = _interopRequireDefault(require("../navigation/flattenNavigation"));

var _stripTrailingHomeSlug = _interopRequireDefault(require("../url/stripTrailingHomeSlug"));

/**
 * Generate routes from data
 *
 * Uses a .json file as base to generate routes for nuxt
 * !This JSON file needs to have a certain structure!
 *
 * Special behaviour for home slugs:
 * We use `/` for the default lang home slug, `/en/` for the english home etc.
 *
 * ⚠️ For now we cannot have nested pages within home `/home/my-nested-slug`
 * 🤷‍ Makes sense to be aware of that!
 *
 * @param {Object} options - The options object to pass in
 * @param {string} options.data
 * @param {string} [options.section] – the craft section that should be the source for our routes
 * @param {string} [options.homeSlug]
 * @param {string} [options.debug]
 * @return {Array} An array of routes to be generated by nuxt generate
 *
 */

/* eslint-disable no-console */
function generateRoutesFromData() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    data: {},
    section: 'pages',
    homeSlug: 'home',
    debug: false
  };

  try {
    var data = options.data,
        section = options.section,
        homeSlug = options.homeSlug;

    if (options.debug) {
      console.log('📇 generateRoutesFromData options: ', options);
    } // flatten data to get all nested pages


    var flattenedData = (0, _flattenNavigation["default"])({
      navigationData: data,
      sections: [section]
    });
    var routes = []; // go through each language

    Object.keys(flattenedData).map(function (lang) {
      var _routes;

      var entryURIs = flattenedData[lang][section].map(function (entry) {
        return entry.uri;
      });

      (_routes = routes).push.apply(_routes, (0, _toConsumableArray2["default"])(entryURIs));
    }); // Kick out all the pages ending with the home slug
    // this will delete all homes for each language
    // it also means we can't have nested pages in home
    // Sadly this step is necessary since we can not redirect() with our middleware during generate

    routes = routes.filter(function (r) {
      // Removing 'home' or '/home'
      return r !== options.homeSlug && r !== "/".concat(options.homeSlug);
    }) // remove slashes and truncate 'de/home' to 'de' etc.
    .map(function (r) {
      return (0, _vuecidHelpers.verifyLeadingSlash)((0, _stripTrailingHomeSlug["default"])((0, _vuecidHelpers.removeTrailingSlash)(r)));
    });

    if (options.debug) {
      console.log('📇 generateRoutesFromData routes', routes);
    }

    return routes;
  } catch (e) {
    console.log('generateRoutesFromData: 🗃 ❌ generateRoutesFromDatas() failed: ', e);
  }
}

var _default = generateRoutesFromData;
exports["default"] = _default;