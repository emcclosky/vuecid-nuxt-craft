/**
 * Generate routes from data
 *
 * Uses a .json file as base to generate routes for nuxt
 * !This JSON file needs to have a certain structure!
 *
 * Special behaviour for home slugs:
 * We use `/` for the default lang home slug, `/en/` for the english home etc.
 *
 * ⚠️ For now we cannot have nested pages within home `/home/my-nested-slug`
 * 🤷‍ Makes sense to be aware of that!
 *
 * @param {Object} options - The options object to pass in
 * @param {string} options.data
 * @param {string} [options.section] – the craft section that should be the source for our routes
 * @param {string} [options.homeSlug]
 * @param {string} [options.debug]
 * @return {Array} An array of routes to be generated by nuxt generate
 *
 */

/* eslint-disable no-console */

import {
  removeTrailingSlash,
  verifyLeadingSlash
} from '@wearelucid/vuecid-helpers'

import flattenNavigation from '../navigation/flattenNavigation'
import stripTrailingHomeSlug from '../url/stripTrailingHomeSlug'

function generateRoutesFromData(
  options = {
    data: {},
    section: 'pages',
    homeSlug: 'home',
    debug: false
  }
) {
  try {
    const { data, section, homeSlug } = options

    if (options.debug) {
      console.log('📇 generateRoutesFromData options: ', options)
    }

    // flatten data to get all nested pages
    const flattenedData = flattenNavigation({
      navigationData: data,
      sections: [section]
    })

    let routes = []

    // go through each language
    Object.keys(flattenedData).map(lang => {
      const entryURIs = flattenedData[lang][section].map(entry => entry.uri)
      routes.push(...entryURIs)
    })

    // Kick out all the pages ending with the home slug
    // this will delete all homes for each language
    // it also means we can't have nested pages in home
    // Sadly this step is necessary since we can not redirect() with our middleware during generate
    routes = routes
      .filter(r => {
        // Removing 'home' or '/home'
        return r !== options.homeSlug && r !== `/${options.homeSlug}`
      })
      // remove slashes and truncate 'de/home' to 'de' etc.
      .map(r => {
        return verifyLeadingSlash(stripTrailingHomeSlug(removeTrailingSlash(r)))
      })

    if (options.debug) {
      console.log('📇 generateRoutesFromData routes', routes)
    }
    return routes
  } catch (e) {
    console.log(
      'generateRoutesFromData: 🗃 ❌ generateRoutesFromDatas() failed: ',
      e
    )
  }
}

export default generateRoutesFromData
